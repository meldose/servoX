# Python stubs generated by omniidl from servo.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "servo"
#
__name__ = "neurapy.servo"
_0_servo = omniORB.openModule("neurapy.servo", r"servo.idl")
_0_servo__POA = omniORB.openModule("neurapy.servo__POA", r"servo.idl")


# typedef ... vector_data
class vector_data:
    _NP_RepositoryId = "IDL:vector_data:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_servo.vector_data = vector_data
_0_servo._d_vector_data  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 7)
_0_servo._ad_vector_data = (omniORB.tcInternal.tv_alias, vector_data._NP_RepositoryId, "vector_data", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 7))
_0_servo._tc_vector_data = omniORB.tcInternal.createTypeCode(_0_servo._ad_vector_data)
omniORB.registerType(vector_data._NP_RepositoryId, _0_servo._ad_vector_data, _0_servo._tc_vector_data)
del vector_data

# interface NeuraPy
_0_servo._d_NeuraPy = (omniORB.tcInternal.tv_objref, "IDL:NeuraPy:1.0", "NeuraPy")
omniORB.typeMapping["IDL:NeuraPy:1.0"] = _0_servo._d_NeuraPy
_0_servo.NeuraPy = omniORB.newEmptyClass()
class NeuraPy :
    _NP_RepositoryId = _0_servo._d_NeuraPy[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_servo.NeuraPy = NeuraPy
_0_servo._tc_NeuraPy = omniORB.tcInternal.createTypeCode(_0_servo._d_NeuraPy)
omniORB.registerType(NeuraPy._NP_RepositoryId, _0_servo._d_NeuraPy, _0_servo._tc_NeuraPy)

# NeuraPy operations and attributes
NeuraPy._d_servoJ = ((omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"]), (omniORB.tcInternal.tv_octet, ), None)
NeuraPy._d_servoX = ((omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_octet, ), None)
NeuraPy._d_getTrajectoryScalingFactor = ((), (omniORB.tcInternal.tv_double, ), None)

# NeuraPy object reference

##############CLIENT PART######################
class _objref_NeuraPy (CORBA.Object):
    _NP_RepositoryId = NeuraPy._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def servoJ(self, *args):
        return self._obj.invoke("servoJ", _0_servo.NeuraPy._d_servoJ, args)

    def servoX(self, *args):
        return self._obj.invoke("servoX", _0_servo.NeuraPy._d_servoX, args)

    def getTrajectoryScalingFactor(self, *args):
        return self._obj.invoke("getTrajectoryScalingFactor", _0_servo.NeuraPy._d_getTrajectoryScalingFactor, args)

omniORB.registerObjref(NeuraPy._NP_RepositoryId, _objref_NeuraPy)
_0_servo._objref_NeuraPy = _objref_NeuraPy
del NeuraPy, _objref_NeuraPy

# NeuraPy skeleton
__name__ = "neurapy.servo__POA"


################SERVER PART##################
class NeuraPy (PortableServer.Servant):
    _NP_RepositoryId = _0_servo.NeuraPy._NP_RepositoryId


    _omni_op_d = {"servoJ": _0_servo.NeuraPy._d_servoJ, "servoX": _0_servo.NeuraPy._d_servoX, "getTrajectoryScalingFactor": _0_servo.NeuraPy._d_getTrajectoryScalingFactor}

NeuraPy._omni_skeleton = NeuraPy
_0_servo__POA.NeuraPy = NeuraPy # defines how the requests from clients are handled
omniORB.registerSkeleton(NeuraPy._NP_RepositoryId, NeuraPy)
del NeuraPy
__name__ = "neurapy.servo"

#
# End of module "servo"
#
__name__ = "neurapy.servo_idl"

_exported_modules = ( "neurapy.servo", )

# The end.

