# Python stubs generated by omniidl from servo.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy # import omniORB before defining any
from omniORB import CORBA, PortableServer # import CORBA and PortableServer
_0_CORBA = CORBA # set global variable


_omnipy.checkVersion(4,2, __file__, 1) # check that the generated code is compatible with version 4.2 of the runtime type system

try: 
    property 
except NameError:
    def property(*args): # define property(...) as a function
        return None


#
# Start of module "servo"
#
__name__ = "neurapy.servo" # set module name as string neurapy.servo
_0_servo = omniORB.openModule("neurapy.servo", r"servo.idl") # set package name as string neurapy.servo
_0_servo__POA = omniORB.openModule("neurapy.servo__POA", r"servo.idl")


# typedef ... vector_data
class vector_data: # define class vector_data
    _NP_RepositoryId = "IDL:vector_data:1.0" # set RepositoryId as string
    def __init__(self, *args, **kw): # initialize class
        raise RuntimeError("Cannot construct objects of this type.") # raise error
_0_servo.vector_data = vector_data #set vector_data as class
_0_servo._d_vector_data  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 7) # set vector_data as sequence
_0_servo._ad_vector_data = (omniORB.tcInternal.tv_alias, vector_data._NP_RepositoryId, "vector_data", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 7)) # set vector_data as alias
_0_servo._tc_vector_data = omniORB.tcInternal.createTypeCode(_0_servo._ad_vector_data) # set vector_data as typecode
omniORB.registerType(vector_data._NP_RepositoryId, _0_servo._ad_vector_data, _0_servo._tc_vector_data) # set vector_data as type
del vector_data # delete vector_data

# interface NeuraPy
_0_servo._d_NeuraPy = (omniORB.tcInternal.tv_objref, "IDL:NeuraPy:1.0", "NeuraPy")
omniORB.typeMapping["IDL:NeuraPy:1.0"] = _0_servo._d_NeuraPy
_0_servo.NeuraPy = omniORB.newEmptyClass()
class NeuraPy : # define class NeuraPy
    _NP_RepositoryId = _0_servo._d_NeuraPy[1]# set RepositoryId as string NeuraPy
    def __init__(self, *args, **kw): # initialize class
        raise RuntimeError("Cannot construct objects of this type.") # raise error

    _nil = CORBA.Object._nil # 


_0_servo.NeuraPy = NeuraPy # set NeuraPy as NeuraPy
_0_servo._tc_NeuraPy = omniORB.tcInternal.createTypeCode(_0_servo._d_NeuraPy)
omniORB.registerType(NeuraPy._NP_RepositoryId, _0_servo._d_NeuraPy, _0_servo._tc_NeuraPy)

# NeuraPy operations and attributes
NeuraPy._d_servoJ = ((omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"]), (omniORB.tcInternal.tv_octet, ), None)
NeuraPy._d_servoX = ((omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.typeMapping["IDL:vector_data:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_octet, ), None)
NeuraPy._d_getTrajectoryScalingFactor = ((), (omniORB.tcInternal.tv_double, ), None)

# NeuraPy object reference

##############CLIENT PART######################
class _objref_NeuraPy (CORBA.Object): # define class _objref_NeuraPy
    _NP_RepositoryId = NeuraPy._NP_RepositoryId

    def __init__(self, obj): # initialize class
        CORBA.Object.__init__(self, obj)

    def servoJ(self, *args): # define servoJ function
        return self._obj.invoke("servoJ", _0_servo.NeuraPy._d_servoJ, args)

    def servoX(self, *args): # define servoX function
        return self._obj.invoke("servoX", _0_servo.NeuraPy._d_servoX, args)

    def getTrajectoryScalingFactor(self, *args): # def  getTrajectoryScalingFactor function
        return self._obj.invoke("getTrajectoryScalingFactor", _0_servo.NeuraPy._d_getTrajectoryScalingFactor, args)

omniORB.registerObjref(NeuraPy._NP_RepositoryId, _objref_NeuraPy)
_0_servo._objref_NeuraPy = _objref_NeuraPy
del NeuraPy, _objref_NeuraPy

# NeuraPy skeleton
__name__ = "neurapy.servo__POA" # set package name as string neurapy.servo__POA


################SERVER PART##################
class NeuraPy (PortableServer.Servant): # define class NeuraPy
    _NP_RepositoryId = _0_servo.NeuraPy._NP_RepositoryId


    _omni_op_d = {"servoJ": _0_servo.NeuraPy._d_servoJ, "servoX": _0_servo.NeuraPy._d_servoX, "getTrajectoryScalingFactor": _0_servo.NeuraPy._d_getTrajectoryScalingFactor}

NeuraPy._omni_skeleton = NeuraPy # set NeuraPy as NeuraPy
_0_servo__POA.NeuraPy = NeuraPy # defines how the requests from clients are handled
omniORB.registerSkeleton(NeuraPy._NP_RepositoryId, NeuraPy) # set omniORB.NeuraPy as NeuraPy
del NeuraPy
__name__ = "neurapy.servo" # set package name as string neurapy.servo

#
# End of module "servo"
#
__name__ = "neurapy.servo_idl" # set module name as string neurapy.servo_idl

_exported_modules = ( "neurapy.servo", )

# The end.

